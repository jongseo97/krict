else if (fun == "Logit_ug/L_nM")
ec <- (10^((log(effv/(1-effv))-p[1])/p[2])) / M[1] * 1000
#ec <- ((exp(-log(10) * (p[1] + log(-(-1 + effv) / (effv))) / p[2]))) / M[1] * 1000
else if (fun == "BCW_ug/L_nM")
ec <- ((p[3]/p[2]*(log(-log(1-effv))-p[1])+1)^(1/p[3])) / M[1] * 1000
#ec <- ((exp(log(-(p[1] * p[3] - p[2] - log(-log(1 - effv)) * p[3]) / p[2]) / p[3]))) / M[1] * 1000
else if (fun == "BCL_ug/L_nM")
ec <- ((exp(log(-(p[1] * p[3] - p[2] + log(-(-1 + effv) / effv) * p[3]) / p[2]) / p[3]))) / M[1] * 1000
else if (fun == "GL_ug/L_nM")
ec <- (10^(-(log((1/effv)^(1/p[3])-1)+p[1])/p[2])) / M[1] * 1000
#ec <- ((exp(-log(10) * (p[1] + log(exp(-log(effv) / p[3]) - 1)) / p[2]))) / M[1] * 1000
else if (fun == "Probit_ug/L_nM")
ec <- ((10^((qnorm(effv, mean=0, sd=1) - p[1]) / p[2]))) / M[1] * 1000
else if (fun == "BCP_ug/L_nM")
ec <- (((p[3] / p[2] * (qnorm(effv, mean=0, sd=1) - p[1]) + 1)^(1 / p[3]))) / M[1] * 1000
else if (fun == "Sigmoid_ug/L_nM")
ec <- ((p[3] - p[2] * log((p[1] - effv) / effv))) / M[1] * 1000
else if (fun == "Logistic_ug/L_nM")
ec <- ((p[3] *((p[1] - effv) / effv)^(1 / p[2]))) / M[1] * 1000
else if (fun == "Chapman_ug/L_nM")
ec <- ((-(log(1 - (effv / p[1])^(1 / p[3])) / p[2]))) / M[1] * 1000
else if (fun == "Gompertz_ug/L_nM")
ec <- ((p[3] - p[2] * log(-log(effv / p[1])))) / M[1] * 1000
#9. Unit conversion from "mM" to "mg/L" (_mM_mg/L)#
else if (fun == "Hill_three_mM_mg/L")
ec <- ((p[3] / (((p[1] / effv - 1)^(1 / p[2]))))) * M[1]
else if (fun == "Weibull_mM_mg/L")
ec <- (10^((log(-log(1 - effv)) - p[1])/p[2])) * M[1]
#ec <- ((exp(-(-log(log(-1 / (-1 + effv))) + p[1]) * log(10) / p[2]))) * M[1]
else if (fun == "Logit_mM_mg/L")
ec <- (10^((log(effv/(1-effv))-p[1])/p[2])) * M[1]
#ec <- ((exp(-log(10) * (p[1] + log(-(-1 + effv) / (effv))) / p[2]))) * M[1]
else if (fun == "BCW_mM_mg/L")
ec <- ((p[3]/p[2]*(log(-log(1-effv))-p[1])+1)^(1/p[3])) * M[1]
#ec <- ((exp(log(-(p[1] * p[3] - p[2] - log(-log(1 - effv)) * p[3]) / p[2]) / p[3]))) * M[1]
else if (fun == "BCL_mM_mg/L")
ec <- ((exp(log(-(p[1] * p[3] - p[2] + log(-(-1 + effv) / effv) * p[3]) / p[2]) / p[3]))) * M[1]
else if (fun == "GL_mM_mg/L")
ec <- (10^(-(log((1/effv)^(1/p[3])-1)+p[1])/p[2])) * M[1]
#ec <- ((exp(-log(10) * (p[1] + log(exp(-log(effv) / p[3]) - 1)) / p[2]))) * M[1]
else if (fun == "Probit_mM_mg/L")
ec <- ((10^((qnorm(effv, mean=0, sd=1) - p[1]) / p[2]))) * M[1]
else if (fun == "BCP_mM_mg/L")
ec <- (((p[3] / p[2] * (qnorm(effv, mean=0, sd=1) - p[1]) + 1)^(1 / p[3]))) * M[1]
else if (fun == "Sigmoid_mM_mg/L")
ec <- ((p[3] - p[2] * log((p[1] - effv) / effv))) * M[1]
else if (fun == "Logistic_mM_mg/L")
ec <- ((p[3] *((p[1] - effv) / effv)^(1 / p[2]))) * M[1]
else if (fun == "Chapman_mM_mg/L")
ec <- ((-(log(1 - (effv / p[1])^(1 / p[3])) / p[2]))) * M[1]
else if (fun == "Gompertz_mM_mg/L")
ec <- ((p[3] - p[2] * log(-log(effv / p[1])))) * M[1]
#10. Unit conversion from "mM" to "ug/L" (_mM_ug/L)#
else if (fun == "Hill_three_mM_ug/L")
ec <- ((p[3] / (((p[1] / effv - 1)^(1 / p[2]))))) * M[1] * 1000
else if (fun == "Weibull_mM_ug/L")
ec <- (10^((log(-log(1 - effv)) - p[1])/p[2])) * M[1] * 1000
#ec <- ((exp(-(-log(log(-1 / (-1 + effv))) + p[1]) * log(10) / p[2]))) * M[1] * 1000
else if (fun == "Logit_mM_ug/L")
ec <- (10^((log(effv/(1-effv))-p[1])/p[2])) * M[1] * 1000
#ec <- ((exp(-log(10) * (p[1] + log(-(-1 + effv) / (effv))) / p[2]))) * M[1] * 1000
else if (fun == "BCW_mM_ug/L")
ec <- ((p[3]/p[2]*(log(-log(1-effv))-p[1])+1)^(1/p[3])) * M[1] * 1000
#ec <- ((exp(log(-(p[1] * p[3] - p[2] - log(-log(1 - effv)) * p[3]) / p[2]) / p[3]))) * M[1] * 1000
else if (fun == "BCL_mM_ug/L")
ec <- ((exp(log(-(p[1] * p[3] - p[2] + log(-(-1 + effv) / effv) * p[3]) / p[2]) / p[3]))) * M[1] * 1000
else if (fun == "GL_mM_ug/L")
ec <- (10^(-(log((1/effv)^(1/p[3])-1)+p[1])/p[2])) * M[1] * 1000
#ec <- ((exp(-log(10) * (p[1] + log(exp(-log(effv) / p[3]) - 1)) / p[2]))) * M[1] * 1000
else if (fun == "Probit_mM_ug/L")
ec <- ((10^((qnorm(effv, mean=0, sd=1) - p[1]) / p[2]))) * M[1] * 1000
else if (fun == "BCP_mM_ug/L")
ec <- (((p[3] / p[2] * (qnorm(effv, mean=0, sd=1) - p[1]) + 1)^(1 / p[3]))) * M[1] * 1000
else if (fun == "Sigmoid_mM_ug/L")
ec <- ((p[3] - p[2] * log((p[1] - effv) / effv))) * M[1] * 1000
else if (fun == "Logistic_mM_ug/L")
ec <- ((p[3] *((p[1] - effv) / effv)^(1 / p[2]))) * M[1] * 1000
else if (fun == "Chapman_mM_ug/L")
ec <- ((-(log(1 - (effv / p[1])^(1 / p[3])) / p[2]))) * M[1] * 1000
else if (fun == "Gompertz_mM_ug/L")
ec <- ((p[3] - p[2] * log(-log(effv / p[1])))) * M[1] * 1000
#11. Unit conversion from "mM" to "uM" (_mM_uM)#
else if (fun == "Hill_three_mM_uM")
ec <- (p[3] / (((p[1] / effv - 1)^(1 / p[2])))) * 1000
else if (fun == "Weibull_mM_uM")
ec <- (10^((log(-log(1 - effv)) - p[1])/p[2])) * 1000
#ec <- (exp(-(-log(log(-1 / (-1 + effv))) + p[1]) * log(10) / p[2])) * 1000
else if (fun == "Logit_mM_uM")
ec <- (10^((log(effv/(1-effv))-p[1])/p[2])) * 1000
#ec <- (exp(-log(10) * (p[1] + log(-(-1 + effv) / (effv))) / p[2])) * 1000
else if (fun == "BCW_mM_uM")
ec <- ((p[3]/p[2]*(log(-log(1-effv))-p[1])+1)^(1/p[3])) * 1000
#ec <- (exp(log(-(p[1] * p[3] - p[2] - log(-log(1 - effv)) * p[3]) / p[2]) / p[3])) * 1000
else if (fun == "BCL_mM_uM")
ec <- (exp(log(-(p[1] * p[3] - p[2] + log(-(-1 + effv) / effv) * p[3]) / p[2]) / p[3])) * 1000
else if (fun == "GL_mM_uM")
ec <- (10^(-(log((1/effv)^(1/p[3])-1)+p[1])/p[2])) * 1000
#ec <- (exp(-log(10) * (p[1] + log(exp(-log(effv) / p[3]) - 1)) / p[2])) * 1000
else if (fun == "Probit_mM_uM")
ec <- (10^((qnorm(effv, mean=0, sd=1) - p[1]) / p[2])) * 1000
else if (fun == "BCP_mM_uM")
ec <- ((p[3] / p[2] * (qnorm(effv, mean=0, sd=1) - p[1]) + 1)^(1 / p[3])) * 1000
else if (fun == "Sigmoid_mM_uM")
ec <- (p[3] - p[2] * log((p[1] - effv) / effv)) * 1000
else if (fun == "Logistic_mM_uM")
ec <- (p[3] *((p[1] - effv) / effv)^(1 / p[2])) * 1000
else if (fun == "Chapman_mM_uM")
ec <- (-(log(1 - (effv / p[1])^(1 / p[3])) / p[2])) * 1000
else if (fun == "Gompertz_mM_uM")
ec <- (p[3] - p[2] * log(-log(effv / p[1]))) * 1000
#12. Unit conversion from "mM" to "nM" (_mM_nM)# - 수정 mwseo
else if (fun == "Hill_three_mM_nM")
ec <- (p[3] / (((p[1] / effv - 1)^(1 / p[2])))) * 1000000
else if (fun == "Weibull_mM_nM")
ec <- (10^((log(-log(1 - effv)) - p[1])/p[2])) * 1000000
#ec <- (exp(-(-log(log(-1 / (-1 + effv))) + p[1]) * log(10) / p[2])) * 1000000
else if (fun == "Logit_mM_nM")
ec <- (10^((log(effv/(1-effv))-p[1])/p[2])) * 1000000
#ec <- (exp(-log(10) * (p[1] + log(-(-1 + effv) / (effv))) / p[2])) * 1000000
else if (fun == "BCW_mM_nM")
ec <- ((p[3]/p[2]*(log(-log(1-effv))-p[1])+1)^(1/p[3])) * 1000000
#ec <- (exp(log(-(p[1] * p[3] - p[2] - log(-log(1 - effv)) * p[3]) / p[2]) / p[3])) * 1000000
else if (fun == "BCL_mM_nM")
ec <- (exp(log(-(p[1] * p[3] - p[2] + log(-(-1 + effv) / effv) * p[3]) / p[2]) / p[3])) * 1000000
else if (fun == "GL_mM_nM")
ec <- (10^(-(log((1/effv)^(1/p[3])-1)+p[1])/p[2])) * 1000000
#ec <- (exp(-log(10) * (p[1] + log(exp(-log(effv) / p[3]) - 1)) / p[2])) * 1000000
else if (fun == "Probit_mM_nM")
ec <- (10^((qnorm(effv, mean=0, sd=1) - p[1]) / p[2])) * 1000000
else if (fun == "BCP_mM_nM")
ec <- ((p[3] / p[2] * (qnorm(effv, mean=0, sd=1) - p[1]) + 1)^(1 / p[3])) * 1000000
else if (fun == "Sigmoid_mM_nM")
ec <- (p[3] - p[2] * log((p[1] - effv) / effv)) * 1000000
else if (fun == "Logistic_mM_nM")
ec <- (p[3] *((p[1] - effv) / effv)^(1 / p[2])) * 1000000
else if (fun == "Chapman_mM_nM")
ec <- (-(log(1 - (effv / p[1])^(1 / p[3])) / p[2])) * 1000000
else if (fun == "Gompertz_mM_nM")
ec <- (p[3] - p[2] * log(-log(effv / p[1]))) * 1000000
#13. Unit conversion from "uM" to "mg/L" (_uM_mg/L)#
else if (fun == "Hill_three_uM_mg/L")
ec <- (((p[3] / (((p[1] / effv - 1)^(1 / p[2]))))) * M[1] ) / 1000
else if (fun == "Weibull_uM_mg/L")
ec <- ((10^((log(-log(1 - effv)) - p[1])/p[2])) * M[1]) / 1000
#ec <- (((exp(-(-log(log(-1 / (-1 + effv))) + p[1]) * log(10) / p[2]))) * M[1] ) / 1000
else if (fun == "Logit_uM_mg/L")
ec <- ((10^((log(effv/(1-effv))-p[1])/p[2])) * M[1]) / 1000
#ec <- (((exp(-log(10) * (p[1] + log(-(-1 + effv) / (effv))) / p[2]))) * M[1] ) / 1000
else if (fun == "BCW_uM_mg/L")
ec <- (((p[3]/p[2]*(log(-log(1-effv))-p[1])+1)^(1/p[3])) * M[1]) / 1000
#ec <- (((exp(log(-(p[1] * p[3] - p[2] - log(-log(1 - effv)) * p[3]) / p[2]) / p[3]))) * M[1] ) / 1000
else if (fun == "BCL_uM_mg/L")
ec <- (((exp(log(-(p[1] * p[3] - p[2] + log(-(-1 + effv) / effv) * p[3]) / p[2]) / p[3]))) * M[1] ) / 1000
else if (fun == "GL_uM_mg/L")
ec <- ((10^(-(log((1/effv)^(1/p[3])-1)+p[1])/p[2])) * M[1]) / 1000
#ec <- (((exp(-log(10) * (p[1] + log(exp(-log(effv) / p[3]) - 1)) / p[2]))) * M[1] ) / 1000
else if (fun == "Probit_uM_mg/L")
ec <- (((10^((qnorm(effv, mean=0, sd=1) - p[1]) / p[2]))) * M[1] ) / 1000
else if (fun == "BCP_uM_mg/L")
ec <- ((((p[3] / p[2] * (qnorm(effv, mean=0, sd=1) - p[1]) + 1)^(1 / p[3]))) * M[1] ) / 1000
else if (fun == "Sigmoid_uM_mg/L")
ec <- (((p[3] - p[2] * log((p[1] - effv) / effv))) * M[1] ) / 1000
else if (fun == "Logistic_uM_mg/L")
ec <- (((p[3] *((p[1] - effv) / effv)^(1 / p[2]))) * M[1] ) / 1000
else if (fun == "Chapman_uM_mg/L")
ec <- (((-(log(1 - (effv / p[1])^(1 / p[3])) / p[2]))) * M[1] ) / 1000
else if (fun == "Gompertz_uM_mg/L")
ec <- (((p[3] - p[2] * log(-log(effv / p[1])))) * M[1] ) / 1000
#14. Unit conversion from "uM" to "ug/L" (_uM_ug/L)#
else if (fun == "Hill_three_uM_ug/L")
ec <- ((p[3] / (((p[1] / effv - 1)^(1 / p[2]))))) * M[1]
else if (fun == "Weibull_uM_ug/L")
ec <- (10^((log(-log(1 - effv)) - p[1])/p[2])) * M[1]
#ec <- ((exp(-(-log(log(-1 / (-1 + effv))) + p[1]) * log(10) / p[2]))) * M[1]
else if (fun == "Logit_uM_ug/L")
ec <- (10^((log(effv/(1-effv))-p[1])/p[2])) * M[1]
#ec <- ((exp(-log(10) * (p[1] + log(-(-1 + effv) / (effv))) / p[2]))) * M[1]
else if (fun == "BCW_uM_ug/L")
ec <- ((p[3]/p[2]*(log(-log(1-effv))-p[1])+1)^(1/p[3])) * M[1]
#ec <- ((exp(log(-(p[1] * p[3] - p[2] - log(-log(1 - effv)) * p[3]) / p[2]) / p[3]))) * M[1]
else if (fun == "BCL_uM_ug/L")
ec <- ((exp(log(-(p[1] * p[3] - p[2] + log(-(-1 + effv) / effv) * p[3]) / p[2]) / p[3]))) * M[1]
else if (fun == "GL_uM_ug/L")
ec <- (10^(-(log((1/effv)^(1/p[3])-1)+p[1])/p[2])) * M[1]
#ec <- ((exp(-log(10) * (p[1] + log(exp(-log(effv) / p[3]) - 1)) / p[2]))) * M[1]
else if (fun == "Probit_uM_ug/L")
ec <- ((10^((qnorm(effv, mean=0, sd=1) - p[1]) / p[2]))) * M[1]
else if (fun == "BCP_uM_ug/L")
ec <- (((p[3] / p[2] * (qnorm(effv, mean=0, sd=1) - p[1]) + 1)^(1 / p[3]))) * M[1]
else if (fun == "Sigmoid_uM_ug/L")
ec <- ((p[3] - p[2] * log((p[1] - effv) / effv))) * M[1]
else if (fun == "Logistic_uM_ug/L")
ec <- ((p[3] *((p[1] - effv) / effv)^(1 / p[2]))) * M[1]
else if (fun == "Chapman_uM_ug/L")
ec <- ((-(log(1 - (effv / p[1])^(1 / p[3])) / p[2]))) * M[1]
else if (fun == "Gompertz_uM_ug/L")
ec <- ((p[3] - p[2] * log(-log(effv / p[1])))) * M[1]
#15. Unit conversion from "uM" to "mM" (_uM_mM)#
else if (fun == "Hill_three_uM_mM")
ec <- ((p[3] / (((p[1] / effv - 1)^(1 / p[2]))))) / 1000
else if (fun == "Weibull_uM_mM")
ec <- (10^((log(-log(1 - effv)) - p[1])/p[2])) / 1000
#ec <- ((exp(-(-log(log(-1 / (-1 + effv))) + p[1]) * log(10) / p[2]))) / 1000
else if (fun == "Logit_uM_mM")
ec <- (10^((log(effv/(1-effv))-p[1])/p[2])) / 1000
#ec <- ((exp(-log(10) * (p[1] + log(-(-1 + effv) / (effv))) / p[2]))) / 1000
else if (fun == "BCW_uM_mM")
ec <- ((p[3]/p[2]*(log(-log(1-effv))-p[1])+1)^(1/p[3])) / 1000
#ec <- ((exp(log(-(p[1] * p[3] - p[2] - log(-log(1 - effv)) * p[3]) / p[2]) / p[3]))) / 1000
else if (fun == "BCL_uM_mM")
ec <- ((exp(log(-(p[1] * p[3] - p[2] + log(-(-1 + effv) / effv) * p[3]) / p[2]) / p[3]))) / 1000
else if (fun == "GL_uM_mM")
ec <- (10^(-(log((1/effv)^(1/p[3])-1)+p[1])/p[2])) / 1000
#ec <- ((exp(-log(10) * (p[1] + log(exp(-log(effv) / p[3]) - 1)) / p[2]))) / 1000
else if (fun == "Probit_uM_mM")
ec <- ((10^((qnorm(effv, mean=0, sd=1) - p[1]) / p[2]))) / 1000
else if (fun == "BCP_uM_mM")
ec <- (((p[3] / p[2] * (qnorm(effv, mean=0, sd=1) - p[1]) + 1)^(1 / p[3]))) / 1000
else if (fun == "Sigmoid_uM_mM")
ec <- ((p[3] - p[2] * log((p[1] - effv) / effv))) / 1000
else if (fun == "Logistic_uM_mM")
ec <- ((p[3] *((p[1] - effv) / effv)^(1 / p[2]))) / 1000
else if (fun == "Chapman_uM_mM")
ec <- ((-(log(1 - (effv / p[1])^(1 / p[3])) / p[2]))) / 1000
else if (fun == "Gompertz_uM_mM")
ec <- ((p[3] - p[2] * log(-log(effv / p[1])))) / 1000
#16. Unit conversion from "uM" to "nM" (_uM_nM)#
else if (fun == "Hill_three_uM_nM")
ec <- ((p[3] / (((p[1] / effv - 1)^(1 / p[2]))))) * 1000
else if (fun == "Weibull_uM_nM")
ec <- (10^((log(-log(1 - effv)) - p[1])/p[2])) * 1000
#ec <- ((exp(-(-log(log(-1 / (-1 + effv))) + p[1]) * log(10) / p[2]))) * 1000
else if (fun == "Logit_uM_nM")
ec <- (10^((log(effv/(1-effv))-p[1])/p[2])) * 1000
#ec <- ((exp(-log(10) * (p[1] + log(-(-1 + effv) / (effv))) / p[2]))) * 1000
else if (fun == "BCW_uM_nM")
ec <- ((p[3]/p[2]*(log(-log(1-effv))-p[1])+1)^(1/p[3])) * 1000
#ec <- ((exp(log(-(p[1] * p[3] - p[2] - log(-log(1 - effv)) * p[3]) / p[2]) / p[3]))) * 1000
else if (fun == "BCL_uM_nM")
ec <- ((exp(log(-(p[1] * p[3] - p[2] + log(-(-1 + effv) / effv) * p[3]) / p[2]) / p[3]))) * 1000
else if (fun == "GL_uM_nM")
ec <- (10^(-(log((1/effv)^(1/p[3])-1)+p[1])/p[2])) * 1000
#ec <- ((exp(-log(10) * (p[1] + log(exp(-log(effv) / p[3]) - 1)) / p[2]))) * 1000
else if (fun == "Probit_uM_nM")
ec <- ((10^((qnorm(effv, mean=0, sd=1) - p[1]) / p[2]))) * 1000
else if (fun == "BCP_uM_nM")
ec <- (((p[3] / p[2] * (qnorm(effv, mean=0, sd=1) - p[1]) + 1)^(1 / p[3]))) * 1000
else if (fun == "Sigmoid_uM_nM")
ec <- ((p[3] - p[2] * log((p[1] - effv) / effv))) * 1000
else if (fun == "Logistic_uM_nM")
ec <- ((p[3] *((p[1] - effv) / effv)^(1 / p[2]))) * 1000
else if (fun == "Chapman_uM_nM")
ec <- ((-(log(1 - (effv / p[1])^(1 / p[3])) / p[2]))) * 1000
else if (fun == "Gompertz_uM_nM")
ec <- ((p[3] - p[2] * log(-log(effv / p[1])))) * 1000
#17. Unit conversion from "nM" to "mg/L" (_nM_mg/L)#
else if (fun == "Hill_three_nM_mg/L")
ec <- (((p[3] / (((p[1] / effv - 1)^(1 / p[2]))))) * M[1] ) / 1000000
else if (fun == "Weibull_nM_mg/L")
ec <- (10^((log(-log(1 - effv)) - p[1])/p[2])) / 1000000
#ec <- (((exp(-(-log(log(-1 / (-1 + effv))) + p[1]) * log(10) / p[2]))) * M[1] ) / 1000000
else if (fun == "Logit_nM_mg/L")
ec <- (10^((log(effv/(1-effv))-p[1])/p[2])) / 1000000
#ec <- (((exp(-log(10) * (p[1] + log(-(-1 + effv) / (effv))) / p[2]))) * M[1] ) / 1000000
else if (fun == "BCW_nM_mg/L")
ec <- ((p[3]/p[2]*(log(-log(1-effv))-p[1])+1)^(1/p[3])) / 1000000
#ec <- (((exp(log(-(p[1] * p[3] - p[2] - log(-log(1 - effv)) * p[3]) / p[2]) / p[3]))) * M[1] ) / 1000000
else if (fun == "BCL_nM_mg/L")
ec <- (((exp(log(-(p[1] * p[3] - p[2] + log(-(-1 + effv) / effv) * p[3]) / p[2]) / p[3]))) * M[1] ) / 1000000
else if (fun == "GL_nM_mg/L")
ec <- (10^(-(log((1/effv)^(1/p[3])-1)+p[1])/p[2])) / 1000000
#ec <- (((exp(-log(10) * (p[1] + log(exp(-log(effv) / p[3]) - 1)) / p[2]))) * M[1] ) / 1000000
else if (fun == "Probit_nM_mg/L")
ec <- (((10^((qnorm(effv, mean=0, sd=1) - p[1]) / p[2]))) * M[1] ) / 1000000
else if (fun == "BCP_nM_mg/L")
ec <- ((((p[3] / p[2] * (qnorm(effv, mean=0, sd=1) - p[1]) + 1)^(1 / p[3]))) * M[1] ) / 1000000
else if (fun == "Sigmoid_nM_mg/L")
ec <- (((p[3] - p[2] * log((p[1] - effv) / effv))) * M[1] ) / 1000000
else if (fun == "Logistic_nM_mg/L")
ec <- (((p[3] *((p[1] - effv) / effv)^(1 / p[2]))) * M[1] ) / 1000000
else if (fun == "Chapman_nM_mg/L")
ec <- (((-(log(1 - (effv / p[1])^(1 / p[3])) / p[2]))) * M[1] ) / 1000000
else if (fun == "Gompertz_nM_mg/L")
ec <- (((p[3] - p[2] * log(-log(effv / p[1])))) * M[1] ) / 1000000
#18. Unit conversion from "nM" to "ug/L" (_nM_ug/L)#
else if (fun == "Hill_three_nM_ug/L")
ec <- (((p[3] / (((p[1] / effv - 1)^(1 / p[2]))))) * M[1] ) / 1000
else if (fun == "Weibull_nM_ug/L")
ec <- (10^((log(-log(1 - effv)) - p[1])/p[2])) / 1000
#ec <- (((exp(-(-log(log(-1 / (-1 + effv))) + p[1]) * log(10) / p[2]))) * M[1] ) / 1000
else if (fun == "Logit_nM_ug/L")
ec <- (10^((log(effv/(1-effv))-p[1])/p[2])) / 1000
#ec <- (((exp(-log(10) * (p[1] + log(-(-1 + effv) / (effv))) / p[2]))) * M[1] ) / 1000
else if (fun == "BCW_nM_ug/L")
ec <- ((p[3]/p[2]*(log(-log(1-effv))-p[1])+1)^(1/p[3])) / 1000
#ec <- (((exp(log(-(p[1] * p[3] - p[2] - log(-log(1 - effv)) * p[3]) / p[2]) / p[3]))) * M[1] ) / 1000
else if (fun == "BCL_nM_ug/L")
ec <- (((exp(log(-(p[1] * p[3] - p[2] + log(-(-1 + effv) / effv) * p[3]) / p[2]) / p[3]))) * M[1] ) / 1000
else if (fun == "GL_nM_ug/L")
ec <- (10^(-(log((1/effv)^(1/p[3])-1)+p[1])/p[2])) / 1000
#ec <- (((exp(-log(10) * (p[1] + log(exp(-log(effv) / p[3]) - 1)) / p[2]))) * M[1] ) / 1000
else if (fun == "Probit_nM_ug/L")
ec <- (((10^((qnorm(effv, mean=0, sd=1) - p[1]) / p[2]))) * M[1] ) / 1000
else if (fun == "BCP_nM_ug/L")
ec <- ((((p[3] / p[2] * (qnorm(effv, mean=0, sd=1) - p[1]) + 1)^(1 / p[3]))) * M[1] ) / 1000
else if (fun == "Sigmoid_nM_ug/L")
ec <- (((p[3] - p[2] * log((p[1] - effv) / effv))) * M[1] ) / 1000
else if (fun == "Logistic_nM_ug/L")
ec <- (((p[3] *((p[1] - effv) / effv)^(1 / p[2]))) * M[1] ) / 1000
else if (fun == "Chapman_nM_ug/L")
ec <- (((-(log(1 - (effv / p[1])^(1 / p[3])) / p[2]))) * M[1] ) / 1000
else if (fun == "Gompertz_nM_ug/L")
ec <- (((p[3] - p[2] * log(-log(effv / p[1])))) * M[1] ) / 1000
#19. Unit conversion from "nM" to "mM" (_nM_mM)#
else if (fun == "Hill_three_nM_mM")
ec <- ((p[3] / (((p[1] / effv - 1)^(1 / p[2])))))/ 1000000
else if (fun == "Weibull_nM_mM")
ec <- (10^((log(-log(1 - effv)) - p[1])/p[2])) / 1000000
#ec <- ((exp(-(-log(log(-1 / (-1 + effv))) + p[1]) * log(10) / p[2])))/ 1000000
else if (fun == "Logit_nM_mM")
ec <- (10^((log(effv/(1-effv))-p[1])/p[2])) / 1000000
#ec <- ((exp(-log(10) * (p[1] + log(-(-1 + effv) / (effv))) / p[2])))/ 1000000
else if (fun == "BCW_nM_mM")
ec <- ((p[3]/p[2]*(log(-log(1-effv))-p[1])+1)^(1/p[3])) / 1000000
#ec <- ((exp(log(-(p[1] * p[3] - p[2] - log(-log(1 - effv)) * p[3]) / p[2]) / p[3])))/ 1000000
else if (fun == "BCL_nM_mM")
ec <- ((exp(log(-(p[1] * p[3] - p[2] + log(-(-1 + effv) / effv) * p[3]) / p[2]) / p[3])))/ 1000000
else if (fun == "GL_nM_mM")
ec <- (10^(-(log((1/effv)^(1/p[3])-1)+p[1])/p[2])) / 1000000
#ec <- ((exp(-log(10) * (p[1] + log(exp(-log(effv) / p[3]) - 1)) / p[2])))/ 1000000
else if (fun == "Probit_nM_mM")
ec <- ((10^((qnorm(effv, mean=0, sd=1) - p[1]) / p[2])))/ 1000000
else if (fun == "BCP_nM_mM")
ec <- (((p[3] / p[2] * (qnorm(effv, mean=0, sd=1) - p[1]) + 1)^(1 / p[3])))/ 1000000
else if (fun == "Sigmoid_nM_mM")
ec <- ((p[3] - p[2] * log((p[1] - effv) / effv)))/ 1000000
else if (fun == "Logistic_nM_mM")
ec <- ((p[3] *((p[1] - effv) / effv)^(1 / p[2])))/ 1000000
else if (fun == "Chapman_nM_mM")
ec <- ((-(log(1 - (effv / p[1])^(1 / p[3])) / p[2])))/ 1000000
else if (fun == "Gompertz_nM_mM")
ec <- ((p[3] - p[2] * log(-log(effv / p[1]))))/ 1000000
#20. Unit conversion from "nM" to "uM" (_nM_uM)#
else if (fun == "Hill_three_nM_uM")
ec <- ((p[3] / (((p[1] / effv - 1)^(1 / p[2]))))) / 1000
else if (fun == "Weibull_nM_uM")
ec <- (10^((log(-log(1 - effv)) - p[1])/p[2])) / 1000
#ec <- ((exp(-(-log(log(-1 / (-1 + effv))) + p[1]) * log(10) / p[2]))) / 1000
else if (fun == "Logit_nM_uM")
ec <- (10^((log(effv/(1-effv))-p[1])/p[2])) / 1000
#ec <- ((exp(-log(10) * (p[1] + log(-(-1 + effv) / (effv))) / p[2]))) / 1000
else if (fun == "BCW_nM_uM")
ec <- ((p[3]/p[2]*(log(-log(1-effv))-p[1])+1)^(1/p[3])) / 1000
#ec <- ((exp(log(-(p[1] * p[3] - p[2] - log(-log(1 - effv)) * p[3]) / p[2]) / p[3]))) / 1000
else if (fun == "BCL_nM_uM")
ec <- ((exp(log(-(p[1] * p[3] - p[2] + log(-(-1 + effv) / effv) * p[3]) / p[2]) / p[3]))) / 1000
else if (fun == "GL_nM_uM")
ec <- (10^(-(log((1/effv)^(1/p[3])-1)+p[1])/p[2])) / 1000
#ec <- ((exp(-log(10) * (p[1] + log(exp(-log(effv) / p[3]) - 1)) / p[2]))) / 1000
else if (fun == "Probit_nM_uM")
ec <- ((10^((qnorm(effv, mean=0, sd=1) - p[1]) / p[2]))) / 1000
else if (fun == "BCP_nM_uM")
ec <- (((p[3] / p[2] * (qnorm(effv, mean=0, sd=1) - p[1]) + 1)^(1 / p[3]))) / 1000
else if (fun == "Sigmoid_nM_uM")
ec <- ((p[3] - p[2] * log((p[1] - effv) / effv))) / 1000
else if (fun == "Logistic_nM_uM")
ec <- ((p[3] *((p[1] - effv) / effv)^(1 / p[2]))) / 1000
else if (fun == "Chapman_nM_uM")
ec <- ((-(log(1 - (effv / p[1])^(1 / p[3])) / p[2]))) / 1000
else if (fun == "Gompertz_nM_uM")
ec <- ((p[3] - p[2] * log(-log(effv / p[1])))) / 1000
ecx[i, ] <- ec
}
#print(ecx)
#print(param)
#print(model)
effects <- c(0.10, 0.20, 0.30, 0.40, 0.50, 0.60, 0.70, 0.80, 0.90)
colName <- effects*100
colnames(ecx) <- colName
ecx
p
dt[1,3:5]
dt
p
M
ec <- p[3] - p[2] * log(-log(effv / p[1]))
ec
effv
ec
p[3] - p[2] * log(-log(effv / p[1]))
p[3]
p[2]
p[1]
effv/p[1]
effv
effv
effv/2
p[1]
effv/p[1]
effv/97.3205
p
dt[1,3:5]
c(dt[1,3:5])
ECx_mod(dt[1,2],c(dt[1,3:5]),effv, effv)
p
c(p)
c(p)[1]
effv / c(p)[1]
p
effv/p[1]
p[1][1]
effv /p[1][1]
effv /p[1][1][1]
p[1]$a
effv / p[1]$a
as.vector(dt[1,3:5])
effv/ as.vector(dt[1,3:5])[1]
as.vector(dt[1,3:5])[1]
as.vector(dt[1,3:5])
as.numeric(as.vector(dt[1,3:5]))
ECx_mod(dt[1,2],as.numeric(as.vector(c(dt[1,3:5]))),effv, effv)
for (i in seq(1:nrow(dt))){
row <- dt[i,]
model <- dt[i,2]
param <- dt[i,3:5]
param <- as.numeric(as.vector(param))
temp <- ECx_mod(model, param, effv, mw)
print(temp)
}
results <- data.frame()
for (i in seq(1:nrow(dt))){
row <- dt[i,]
model <- dt[i,2]
param <- dt[i,3:5]
param <- as.numeric(as.vector(param))
temp <- ECx_mod(model, param, effv, mw)
results <- rbind(results, temp)
}
results
p <- c(97.32, 152.70, 338.25)
#effv <- c(0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9)
effv <- c(10,20,30,40,50,60,70,80,90)
ECx_mod(dt[1,2],as.numeric(as.vector(c(dt[1,3:5]))),effv, effv)
results <- data.frame()
for (i in seq(1:nrow(dt))){
row <- dt[i,]
model <- dt[i,2]
param <- dt[i,3:5]
param <- as.numeric(as.vector(param))
temp <- ECx_mod(model, param, effv, mw)
results <- rbind(results, temp)
}
results
temp
effv
temp
temp[1]
for (i in seq(1:nrow(dt))){
row <- dt[i,]
model <- dt[i,2]
param <- dt[i,3:5]
param <- as.numeric(as.vector(param))
results <- ECx_mod(model, param, effv, mw)
temp <- cbind(effv, results)
}
temp
effv
results
cbind(temp, results)
cbind(results, temp)
cbind(effv, results)
length(effv)
length(results)
cbind(results,effv)
as.vector(results)
cbind(effv, as.vector(results))
library(writexl)
temp <- cbind(effv, as.vector(results))
names(temp) <- c('Effect.Mix', 'Observed')
name <- paste0('Mix_',i,'_exp.xlsx')
write_xlsx(temp, name)
temp
temp <- cbind(effv, as.vector(results))
temp
data.frame(temp)
temp <- cbind(effv, as.vector(results))
temp <- data.frame(temp)
names(temp) <- c('Effect.Mix', 'Observed')
name <- paste0('Mix_',i,'_exp.xlsx')
write_xlsx(temp, name)
i
source('ECx_mod.R')
library(writexl)
dt <- read.csv('20230920_Mixture.csv')
dt <- dt[,-1]
head(dt)
mw <- c(1)
#effv <- c(0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9)
effv <- c(10,20,30,40,50,60,70,80,90)
ECx_mod(dt[1,2],as.numeric(as.vector(c(dt[1,3:5]))),effv, effv)
for (i in seq(1:nrow(dt))){
row <- dt[i,]
model <- dt[i,2]
param <- dt[i,3:5]
param <- as.numeric(as.vector(param))
results <- ECx_mod(model, param, effv, mw)
temp <- cbind(effv, as.vector(results))
temp <- data.frame(temp)
names(temp) <- c('Effect.Mix', 'Observed')
name <- paste0('Mix_',i,'_exp.xlsx')
write_xlsx(temp, name)
}
